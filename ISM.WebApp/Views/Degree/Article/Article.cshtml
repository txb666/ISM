@model ISM.WebApp.ViewModels.ArticleIndexViewModel
@using Microsoft.AspNetCore.Http;
@using Newtonsoft.Json;
@using ISM.WebApp.Constant;
@{
    var sessionUser = JsonConvert.DeserializeObject<Account>(Context.Session.GetString(LoginConst.SessionKeyName));
    if (sessionUser.role_name == "Degree")
    {
        ViewData["Title"] = "Pre-Approval Visa Page";
        Layout = "~/Views/Shared/_DegreeStudentLayout.cshtml";
    }
    else if (sessionUser.role_name == "Mobility")
    {
        ViewData["Title"] = "Pre-Approval Visa  Page";
        Layout = "~/Views/Shared/_MobilityStudentLayout.cshtml";
    }
}


<h1 style="text-align: center;">@Model.article.title</h1>
<div style="height: 50px;">

</div>

<a href="~/Article/@Model.article.type/@Model.article.fileName" style="font-size:24px;" download="@Model.article.title">download file</a>
<br />
<h1>Preview</h1>
<br />
<div id="pdf-main-container">
    <div id="pdf-loader">
        <div id="pdf-loading-bar"><div id="pdf-loading-completed"></div></div>
    </div>
    <div id="pdf-contents">
        <div class="top-bar">
            <button class="btn prev-page">
                <i class="fas fa-arrow-circle-left"></i> Prev Page
            </button>
            <button class="btn next-page">
                Next Page <i class="fas fa-arrow-circle-right"></i>
            </button>
            <span class="page-info">
                Page <span class="page-num"></span> of <span class="page-count"></span>
            </span>
        </div>
        <br />
        <canvas id="pdf-canvas" style="width:100%;"></canvas>
        <div id="page-loader" style="height:100%; font-size:30px;">Loading page ...</div>
        <div class="top-bar">
            <button class="btn prev-page">
                <i class="fas fa-arrow-circle-left"></i> Prev Page
            </button>
            <button class="btn next-page">
                Next Page <i class="fas fa-arrow-circle-right"></i>
            </button>
            <span class="page-info">
                Page <span class="page-num"></span> of <span class="page-count"></span>
            </span>
        </div>
    </div>
</div>

<script>

    var url = '../../Article/@Model.article.type/@Model.article.fileName?' + performance.now();

    var pdfDoc = null,
        pageNum = 1,
        pageIsRendering = false,
        pageNumIsPending = null,
        scale = 4,
        canvas = document.getElementById('pdf-canvas'),
        ctx = canvas.getContext('2d');

    // Render the page
    var renderPage = num => {
        pageIsRendering = true;
        $("#pdf-canvas").hide();
        $("#page-loader").show();
        // Get page
        pdfDoc.getPage(num).then(page => {
            // Set scale
            var viewport = page.getViewport({ scale });
            canvas.height = viewport.height;
            canvas.width = viewport.width;
            $("#page-loader").height(viewport.height);

            var renderCtx = {
                canvasContext: ctx,
                viewport
            };

            page.render(renderCtx).promise.then(() => {
                pageIsRendering = false;
                if (pageNumIsPending !== null) {
                    renderPage(pageNumIsPending);
                    pageNumIsPending = null;
                }
                $("#pdf-canvas").show();
                $("#page-loader").hide();
            });

            // Output current page
            $(".page-num").text(num);
        });
    };

    // Check for pages rendering
    var queueRenderPage = num => {
        if (pageIsRendering) {
            pageNumIsPending = num;
        } else {
            renderPage(num);
        }
    };

    //load document
    var loadingTask = pdfjsLib.getDocument(url);

    //get progress data
    loadingTask.onProgress = function (data) {
        var percent_loaded = (data.loaded / data.total) * 100;
        $("#pdf-loading-completed").css('width', percent_loaded + '%');
    }

    $("#pdf-loader").show();
    loadingTask.promise.then(function (pdfDoc_) {
        pdfDoc = pdfDoc_;
        $(".page-count").text(pdfDoc.numPages);
        $("#pdf-loader").hide();
        $("#pdf-contents").show();
        renderPage(pageNum);
    }).catch(err => {
        // Display error
        $("#pdf-loader").hide();
        var div = document.createElement('div');
        div.className = 'error';
        div.appendChild(document.createTextNode(err.message));
        document.querySelector('body').insertBefore(div, canvas);
        // Remove top bar
        document.querySelector('.top-bar').style.display = 'none';
    });

    // Button Events
    $(".prev-page").on('click', function () {
        if (pageNum <= 1) {
            return;
        }
        pageNum--;
        queueRenderPage(pageNum);
    });

    $(".next-page").on('click', function () {
        if (pageNum >= pdfDoc.numPages) {
            return;
        }
        pageNum++;
        queueRenderPage(pageNum);
    });

</script>