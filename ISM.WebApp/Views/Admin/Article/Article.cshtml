@model ISM.WebApp.ViewModels.ArticleIndexViewModel
@{
    ViewData["Title"] = "Admin Home Page";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h1 style="text-align: center;">@Model.article.title</h1>
<div style="height: 50px;">
    <button class="btn btn-danger" style="float:right; width:80px; border-radius:10px; margin-left:10px">
        <a style="text-decoration:none; color:white;" href="#">Delete</a>
    </button>
    <button class="btn btn-success" style="float:right; width:80px; border-radius:10px;">
        <a style="text-decoration:none; color:white" href="#xmas-popup">Create</a>
    </button>


    <div id="xmas-popup" class="popup" href="#">
        <div class="popup-content" style="height:200px">
            <form id="editArticleForm">
                <input type="hidden" id="edit_article_id" value="@Model.article.article_id" />
                <input type="hidden" id="edit_old_file_name" value="@Model.article.fileName" />
                <input type="hidden" id="edit_type" value="@Model.article.type" />
                <div class="form-group row">
                    <label style="margin-left: 30px; font-weight: bold; width:100px;" for="title">Title</label>
                    <input style="width: 300px; margin-left: 30px; border-radius: 5px;" type="text" name="title" id="edit_title" value="@Model.article.title" @(Model.uniqueArticle == true ? "disabled" : "") />
                </div>
                <div class="form-group row">
                    <label style="margin-left: 30px; font-weight: bold; width:100px;" for="uploadFile">Select a PDF file:</label>
                    <input style="width: 300px; margin-left: 30px; border-radius: 5px;" type="file" name="uploadFile" id="edit_file" accept="application/pdf">
                </div>
                <div class="form-group row">
                    <button id="save" style="margin-left: 190px; width: 80px;" class="btn btn-success" onclick="validateEditArticle()" type="button">Save</button>
                    <button style="margin-left: 80px;width: 80px;" type="button" class="btn btn-danger" id="cancel">
                        <a style="text-decoration: none; color: white;" href="#">Cancel</a>
                    </button>
                </div>

            </form>
        </div>
    </div>
    <!--<form id="editArticleForm">
        <input type="hidden" id="edit_article_id" value="@Model.article.article_id" />
        <input type="hidden" id="edit_old_file_name" value="@Model.article.fileName" />
        <input type="hidden" id="edit_type" value="@Model.article.type" />
        <div class="form-group row">
            <label for="title">Title</label>
            <input type="text" name="title" id="edit_title" value="@Model.article.title" @(Model.uniqueArticle == true ? "disabled" : "") />
        </div>
        <div class="form-group row">
            <label for="uploadFile">Select a PDF file:</label>
            <input type="file" name="uploadFile" id="edit_file" accept="application/pdf">
        </div>
        <div class="form-group row">
            <button onclick="validateEditArticle()" type="button">Save</button>
        </div>-->
    @*<label for="title">Title</label>
        <input type="text" name="title" id="edit_title" value="@Model.article.title" @(Model.uniqueArticle == true ? "disabled" : "") />
        <label for="uploadFile">Select a PDF file:</label>
        <input type="file" name="uploadFile" id="edit_file" accept="application/pdf">
        <button onclick="validateEditArticle()" type="button">Save</button>*@
    <!--</form>-->
</div>
<a href="~/Article/@Model.article.type/@Model.article.fileName" style="font-size:24px;" download>download file</a>
<br />
<h1>Preview</h1>
<div class="top-bar">
    <button class="btn" id="prev-page">
        <i class="fas fa-arrow-circle-left"></i> Prev Page
    </button>
    <button class="btn" id="next-page">
        Next Page <i class="fas fa-arrow-circle-right"></i>
    </button>
    <span class="page-info">
        Page <span id="page-num"></span> of <span id="page-count"></span>
    </span>
</div>
<br />

<canvas id="pdf-render" style="width:100%;"></canvas>
<script>

    const url = '../../Article/@Model.article.type/@Model.article.fileName?' + performance.now();

    let pdfDoc = null,
        pageNum = 1,
        pageIsRendering = false,
        pageNumIsPending = null;

    const scale = 5,
        canvas = document.getElementById('pdf-render'),
        ctx = canvas.getContext('2d');

    // Render the page
    const renderPage = num => {
        pageIsRendering = true;
        // Get page
        pdfDoc.getPage(num).then(page => {
            // Set scale
            const viewport = page.getViewport({ scale });
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            const renderCtx = {
                canvasContext: ctx,
                viewport
            };

            page.render(renderCtx).promise.then(() => {
                pageIsRendering = false;

                if (pageNumIsPending !== null) {
                    renderPage(pageNumIsPending);
                    pageNumIsPending = null;
                }
            });

            // Output current page
            document.getElementById('page-num').textContent = num;
        });
    };

    // Check for pages rendering
    const queueRenderPage = num => {
        if (pageIsRendering) {
            pageNumIsPending = num;
        } else {
            renderPage(num);
        }
    };

    // Show Prev Page
    const showPrevPage = () => {
        if (pageNum <= 1) {
            return;
        }
        pageNum--;
        queueRenderPage(pageNum);
    };

    // Show Next Page
    const showNextPage = () => {
        if (pageNum >= pdfDoc.numPages) {
            return;
        }
        pageNum++;
        queueRenderPage(pageNum);
    };

    // Get Document
    pdfjsLib
        .getDocument(url)
        .promise.then(pdfDoc_ => {
            pdfDoc = pdfDoc_;

            document.querySelector('#page-count').textContent = pdfDoc.numPages;

            renderPage(pageNum);
        })
        .catch(err => {
            // Display error
            const div = document.createElement('div');
            div.className = 'error';
            div.appendChild(document.createTextNode(err.message));
            document.querySelector('body').insertBefore(div, canvas);
            // Remove top bar
            document.querySelector('.top-bar').style.display = 'none';
        });

    // Button Events
    document.querySelector('#prev-page').addEventListener('click', showPrevPage);
    document.querySelector('#next-page').addEventListener('click', showNextPage);

</script>